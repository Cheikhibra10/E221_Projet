name: üöÄ Build & Deploy pedagogie-service

on:
  workflow_dispatch:
  repository_dispatch:
    types: [commun-published]

jobs:
  build-deploy:
    runs-on: ubuntu-latest

    steps:
      # 1. Checkout code
      - name: üì¶ Checkout code
        uses: actions/checkout@v3
        with:
          persist-credentials: true
          fetch-depth: 0

      # 2. Get commun version from repository_dispatch event (may be empty if manual run)
      - name: üè∑Ô∏è Get commun version
        id: get-version
        run: echo "commun_version=${{ github.event.client_payload.version }}" >> "$GITHUB_OUTPUT"

      # 3. Display commun version (debug)
      - name: üìù Display commun version
        run: |
          echo "Using commun version: ${{ steps.get-version.outputs.commun_version }}"
          
          # 4. Setup Java 21
      - name: ‚òï Setup Java 21
        uses: actions/setup-java@v3
        with:
          distribution: temurin
          java-version: 21
          cache: maven

      # 5. Configure Maven settings for GitHub Packages
      - name: üîê Configure Maven settings
        run: |
          mkdir -p ~/.m2
          cat <<'EOF' > ~/.m2/settings.xml
          <settings>
            <servers>
              <server>
                <id>github</id>
                <username>${env.GITHUB_ACTOR}</username>
                <password>${env.GITHUB_TOKEN}</password>
              </server>
            </servers>
          </settings>
          EOF

      # 6. Make Maven Wrapper executable
      - name: üîß Make mvnw executable
        run: chmod +x ./mvnw

      # 7. Clean project and local cache of commun (forces fresh resolve)
      - name: üßπ Clean project & clear commun cache
        run: |
          rm -rf ~/.m2/repository/com/cheikh/commun
          ./mvnw clean

      # 8. Update commun.version in pom.xml (skip if no version from event)
      - name: üõ† Update commun.version in pom.xml
        if: ${{ steps.get-version.outputs.commun_version != '' }}
        run: |
          ./mvnw versions:set-property \
            -Dproperty=commun.version \
            -DnewVersion=${{ steps.get-version.outputs.commun_version }} \
            -DgenerateBackupPoms=false
          ./mvnw versions:commit

      # 9. Debug Maven Version & pre-build
      - name: üîç Debug Maven version & package
        run: |
          echo "Commun version property:"
          ./mvnw help:evaluate -Dexpression=commun.version -q -DforceStdout || echo "(no commun.version property)"
          echo "Project version:"
          ./mvnw help:evaluate -Dexpression=project.version -q -DforceStdout
          echo "Building project (package)..."
          ./mvnw package -DskipTests
          echo "Content of target directory:"
          ls -lh target/ || echo "target/ not found"

      # 10. Commit updated pom.xml (only if changed)
      - name: ‚úÖ Commit updated pom.xml
        run: |
          git config user.name "${{ github.actor }}"
          git config user.email "${{ github.actor }}@users.noreply.github.com"
          git add pom.xml
          git diff --cached --quiet || git commit -m "üîÑ MAJ commun.version => ${{ steps.get-version.outputs.commun_version }}"
          git pull --rebase origin master
          git push origin HEAD
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      # 10bis. Fix NULL values in cycle table before deploy (requires DB_* secrets)
      - name: üõ† Fix cycle table (NULL -> 0)
        if: ${{ secrets.DB_HOST != '' && secrets.DB_USER != '' && secrets.DB_PASSWORD != '' && secrets.DB_NAME != '' }}
        run: |
          echo "Fixing cycle table on remote DB..."
          cat <<'EOF' > fix_cycle.sql
          UPDATE cycle SET taux_horaire = 0 WHERE taux_horaire IS NULL;
          ALTER TABLE cycle ALTER COLUMN taux_horaire SET DEFAULT 0;
          ALTER TABLE cycle ALTER COLUMN taux_horaire SET NOT NULL;
          EOF

          apt-get update && apt-get install -y postgresql-client

          echo "Testing DB connection..."
          PGPASSWORD="${{ secrets.DB_PASSWORD }}" psql \
            -h "${{ secrets.DB_HOST }}" \
            -U "${{ secrets.DB_USER }}" \
            -d "${{ secrets.DB_NAME }}" \
            -p 5432 \
            -c '\dt' || { echo "‚ùå DB connection failed"; exit 1; }

          echo "Applying cycle fix..."
          PGPASSWORD="${{ secrets.DB_PASSWORD }}" psql \
            -h "${{ secrets.DB_HOST }}" \
            -U "${{ secrets.DB_USER }}" \
            -d "${{ secrets.DB_NAME }}" \
            -p 5432 \
            -f fix_cycle.sql

      # 11. Build & Deploy pedagogie-service
      - name: üöÄ Build & Deploy pedagogie-service
        run: ./mvnw deploy -DskipTests
