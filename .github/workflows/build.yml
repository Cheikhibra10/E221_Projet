name: üöÄ Build & Deploy pedagogie-service

on:
  workflow_dispatch:
  repository_dispatch:
    types: [commun-published]

jobs:
  build-deploy:
    runs-on: ubuntu-latest

    steps:
      # 1. Checkout code
      - name: üì¶ Checkout code
        uses: actions/checkout@v3
        with:
          persist-credentials: true
          fetch-depth: 0

      # 2. Get commun version from repository_dispatch event
      - name: üè∑Ô∏è Get commun version
        id: get-version
        run: echo "commun_version=${{ github.event.client_payload.version }}" >> $GITHUB_OUTPUT

      # 3. Display commun version
      - name: üìù Display commun version
        run: |
          echo "Using commun version: ${{ steps.get-version.outputs.commun_version }}"

      # 4. Setup Java 21
      - name: ‚òï Setup Java 21
        uses: actions/setup-java@v3
        with:
          distribution: temurin
          java-version: 21
          cache: maven

      # 5. Configure Maven settings for GitHub Packages
      - name: üîê Configure Maven settings
        run: |
          mkdir -p ~/.m2
          cat <<EOF > ~/.m2/settings.xml
          <settings>
            <servers>
              <server>
                <id>github</id>
                <username>${{ github.actor }}</username>
                <password>${{ secrets.GITHUB_TOKEN }}</password>
              </server>
            </servers>
          </settings>
          EOF

      # 6. Make Maven Wrapper executable
      - name: Make mvnw executable
        run: chmod +x ./mvnw

      # 7. Clean project and local cache of commun
      - name: Force clean
        run: |
          rm -rf ~/.m2/repository/com/cheikh/commun
          ./mvnw clean

      # 8. Update commun.version in pom.xml
      - name: üõ† Update commun.version in pom.xml
        run: |
          ./mvnw versions:set-property \
            -Dproperty=commun.version \
            -DnewVersion=${{ steps.get-version.outputs.commun_version }} \
            -DgenerateBackupPoms=false
          ./mvnw versions:commit

      # 9. Debug updated POM version & build
      - name: Debug Maven Version
        run: |
          echo "Commun version now set to:"
          ./mvnw help:evaluate -Dexpression=commun.version -q -DforceStdout
          echo "Project version:"
          ./mvnw help:evaluate -Dexpression=project.version -q -DforceStdout
          
          echo "Building project (package)..."
          ./mvnw package -DskipTests

          echo "Content of target directory:"
          ls -lh target/

      # 10. Commit updated pom.xml
      - name: ‚úÖ Commit updated pom.xml
        run: |
          git config user.name "${{ github.actor }}"
          git config user.email "${{ github.actor }}@users.noreply.github.com"
          git add pom.xml
          git commit -m "üîÑ MAJ commun.version => ${{ steps.get-version.outputs.commun_version }}" || echo "Pas de changement √† commiter"
          git pull --rebase origin master
          git push origin HEAD
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      # 10bis. Ensure cycle.taux_horaire exists, fill NULLs, set default, enforce NOT NULL when safe
      - name: üõ† Ensure cycle.taux_horaire column
        run: |
          # --- Validate required DB secrets ---
          if [ -z "${{ secrets.DB_HOST }}" ] || [ -z "${{ secrets.DB_USER }}" ] || [ -z "${{ secrets.DB_PASSWORD }}" ] || [ -z "${{ secrets.DB_NAME }}" ]; then
          echo "‚ùå DB secrets missing (DB_HOST/USER/PASSWORD/NAME). Skipping DB fix and failing."
          exit 1
          fi
          
          DB_PORT="${{ secrets.DB_PORT }}"
          if [ -z "$DB_PORT" ]; then DB_PORT=5432; fi
          
          echo "üîß Preparing SQL fix script for cycle.taux_horaire ..."
          cat <<'EOF' > fix_cycle.sql
          -- 1) Add column if missing (no NOT NULL yet; default 0 fills existing rows on add)
          DO $$
          BEGIN
          IF NOT EXISTS (
           SELECT 1 FROM information_schema.columns
           WHERE table_name = 'cycle' AND column_name = 'taux_horaire'
          ) THEN
           EXECUTE 'ALTER TABLE cycle ADD COLUMN taux_horaire NUMERIC DEFAULT 0';
          END IF;
          END$$;
          
          -- 2) Backfill NULLs (covers case where column existed but had NULLs)
          UPDATE cycle SET taux_horaire = 0 WHERE taux_horaire IS NULL;
          
          -- 3) Ensure future inserts default to 0
          ALTER TABLE cycle ALTER COLUMN taux_horaire SET DEFAULT 0;
          
          -- 4) Enforce NOT NULL only if safe
          DO $$
          DECLARE c int;
          BEGIN
          SELECT COUNT(*) INTO c FROM cycle WHERE taux_horaire IS NULL;
          IF c = 0 THEN
           EXECUTE 'ALTER TABLE cycle ALTER COLUMN taux_horaire SET NOT NULL';
          ELSE
           RAISE NOTICE 'NOT setting NOT NULL on cycle.taux_horaire: % NULL rows remain.', c;
          END IF;
          END$$;
          EOF
          
          echo "üì¶ Installing PostgreSQL client..."
          apt-get update -y >/dev/null 2>&1
          apt-get install -y postgresql-client >/dev/null 2>&1
          
          echo "üîó Testing DB connection..."
          PGPASSWORD="${{ secrets.DB_PASSWORD }}" psql \
          -h "${{ secrets.DB_HOST }}" \
          -U "${{ secrets.DB_USER }}" \
          -d "${{ secrets.DB_NAME }}" \
          -p "$DB_PORT" \
          -c '\dt' || { echo "‚ùå DB connection failed"; exit 1; }
          
          echo "üöÄ Applying SQL fix..."
          PGPASSWORD="${{ secrets.DB_PASSWORD }}" psql \
          -h "${{ secrets.DB_HOST }}" \
          -U "${{ secrets.DB_USER }}" \
          -d "${{ secrets.DB_NAME }}" \
          -p "$DB_PORT" \
          -f fix_cycle.sql
          
          echo "‚úÖ cycle.taux_horaire fix step complete."
          
          # 11. Build and Deploy pedagogie-service
      - name: üöÄ Build and Deploy pedagogie-service
        run: ./mvnw deploy -DskipTests
